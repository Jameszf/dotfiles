#+TITLE:My Emacs Config
#+PROPERTY: header-args :tangle ./init.el
Most of my Emacs config is generated using this file. I use literate programming to stay organized (the actual elisp code loaded in by Emacs is in ~init.el~). This is an original configuration that takes inspiration from /Spacemacs/, and /Doomemacs/.

* Packages to investigate
  + evil-join
  + default-indent-new-line
  + mark-defun
  + evil-lookup
  + [[https://github.com/doomemacs/doomemacs/tree/develop/modules/editor/evil#plugins][evil-plugins]]
  + [[https://www.emacswiki.org/emacs/ERC][Emacs IRC]]
  + Avy/evil-easymotion
  + company
  + [[https://www.reddit.com/r/emacs/comments/w4gxoa/what_are_some_musthave_packages_for_emacs/][more]]
  + pulsar
  + hydra/transient/hercules
  + consult-jump-project
  + embark
  + treemacs
  + evil-multiedit
  + moldable-emacs.
  + perspective.el
  + treesitter
  + eglot
  + xref
  + emacs-calfw
  + org-mode
  + org-sticky-header
  + ace-window
  + treemacs
    
* Issues
 + Evil org mode header movement.
 + Org-appear triggering outside of org-mode files (probable source: ~my-org-appear-trigger-function~).
 + org-capture "rw" template doesn't link to the correct task if the heading is non-unique.
 + pasting from register in minibuffer (what is a register? How does copying and pasting work?).
 + Alignment in org tables with chinese characters.

* Requirements
Additional software is required for this configuration to work.

* Built-in Configuration
Here lies configuration of built-in libraries and emacs variables. This is primarily ~org-mode~ configurations as well as some additional minor modes: ~eglot~, ~save-place~, ~recentf~, and more.

** UI
*Decluttering Emacs*
#+begin_src emacs-lisp

  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message "jmmkr")
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

*Aesthetics*
#+begin_src emacs-lisp

  (set-fringe-mode 0) ;; Bars on the left and right sides of the frame.
  (load-theme 'tango-dark)
  (set-frame-font "Office Code Pro 12" nil t)

#+end_src

*Bells*
Emacs defaults to an auditory bell which plays a sound whenever certain actions are performed (such as trying to go below the end of a file). I prefer the visual bell which will instead flash the top and bottom of the frame to indicate.
#+begin_src emacs-lisp

  (setq visible-bell t)

#+end_src

** Minor Modes
*Recentf-Mode*
Keeps track of recently visited files across sessions and allows fast jumps to them through their dispatcher which can be invoked with ~recentf-open-files~.
#+begin_src emacs-lisp

  (recentf-mode 1)
  (setq recentf-max-menu-items 12)
  (setq recentf-max-saved-items 12)

#+end_src

*Save-Place-Mode*
This minor mode saves cursor positions in files and restores them the next time the file is opened.
#+begin_src emacs-lisp

  (save-place-mode 1)

#+end_src


*Visual-Line-Mode*
#+begin_src emacs-lisp

  (global-visual-line-mode 1)

#+end_src

*Auto-Revert-Mode*
Auto-Revert-Mode will automatically revert buffers if the file they are displaying is changed.
#+begin_src emacs-lisp

  (global-auto-revert-mode 1)

#+end_src

*Display-Line-Numbers-Mode*
Displays line numbers in the left margin of buffers. I only enable these in programming major modes and they are disabled in text major modes.
#+begin_src emacs-lisp

  (add-hook 'prog-mode-hook
            (lambda() (display-line-numbers-mode 'visual)))
  (add-hook 'text-mode-hook
            (lambda () (display-line-numbers-mode -1)))

#+end_src

** Misc Settings
#+begin_src emacs-lisp

  (setq user-emacs-directory (expand-file-name "~/.emacs.d"))
  (setq debug-on-error t)
  (setq use-dialog-box nil)

#+end_src

** Hooks
#+begin_src emacs-lisp

    (add-hook 'python-mode-hook
	      (lambda ()
		(setq indent-tabs-mode nil)
		(setq tab-width 4)
		(setq python-indent-offset 4)))

    (add-hook 'c++-mode-hook
	      (lambda ()
		(setq indent-tabs-mode nil)
		(setq tab-width 4)))

    (add-hook 'prog-mode-hook
	      (lambda ()
		(display-line-numbers-mode 1)))

    (add-hook 'text-mode-hook
	      (lambda ()
		(visual-fill-column-mode 1)))

    (add-hook 'emacs-startup-hook
	      (lambda ()
		(message "Hello Startup Hook Activated")))
    ;; (add-hook 'prog-mode-hook 'electric-pair-mode)

#+end_src

** Backup and Autosave
Emacs will occassionally backup and autosave files. These files can quickly fill up folders and be cumbersome to deal with. Having designated folders to store them helps me organize my files better.
#+begin_src emacs-lisp

  ;; backup
  (setq make-backup-files t)
  (setq vc-make-backup-files nil)
  (setq version-control t)
  (setq delete-old-versions t)
  (setq kept-new-versions 3)
  (setq kept-old-versions 1)
  (setq backup-directory-alist
	`(("." . ,(expand-file-name "~/.emacs.d/backups"))))

  ;; auto-save
  (setq auto-save-file-name-transforms
	`((".*" "~/.emacs.d/.saves/" t)))

#+end_src

* Package Management
** Straight
~straight.el~ is a package manager available on Windows and Linux which handles Emacs packages in a more precise way. It can download, compile, and load exact versions of packages hosted on github (down to the specific commit).For this, ~straight.el~ uses a lock file (createable with ~straight-freeze-versions~) to keep track of these. The order packages are loaded in is important. ~straight.el~ will try to download the most recent version, along with its dependencies, which sometimes leads to version mismatches (e.g. ~org~).

Some variables impact setup and must be set before the package is loaded in. ~straight.el~ is compatible with ~use-package~.
#+begin_src emacs-lisp

  (setq straight-use-package-by-default t)

#+end_src

The below code is taken from [[https://github.com/radian-software/straight.el#getting-started][the official docs]] on how to setup straight. It is better to not use both ~straight.el~ and ~package.el~ to prevent odd bugs. So, there is also some additional code in ~early-init.el~ for ~Emacs>=27~ to prevent ~package.el~ from loading packages on startup.
#+begin_src emacs-lisp :tangle early-init.el

  (setq package-enable-at-startup nil)

#+end_src

#+begin_src emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+end_src

** Built-ins
Emacs comes with packages that are generally always out-of-date no matter the Emacs version. To prevent version mismatches, you must load them in with ~straight.el~ before third-party packages declare them in their dependancies.
#+begin_src emacs-lisp

  (straight-use-package '(org :type built-in))
  (straight-use-package '(xrefs :type built-in))

#+end_src

** Use-Package and Diminish
~use-package~ provides useful macros for installing and configuring packages. Important keywords are ~:init~, ~:config~, and ~:custom~.
 + ~:init~ executes code before the package is loaded in.
 + ~:config~ executes code after the package is loaded in.
 + ~:custom~ allows customization of package variables.
#+begin_src emacs-lisp

  (straight-use-package 'use-package)

#+end_src

*Diminish*
A MELPA package that hides enabled minor modes in the mode line. This is to keep the mode-line uncluttered with usually active, unimportant, minor modes. Diminish is integrated into ~use-package~ with ~:diminish~.
#+begin_src emacs-lisp

  (straight-use-package 'diminish)

#+end_src

* Personal Code
Code for my common-files command. This command allows easy opening of files (in `common-files`) I visit often. 
#+begin_src emacs-lisp
  (defvar common-files '() "List of common files for common-files command.")

  (defun add-common-file (cfpath)
    (let ((name (substring cfpath (+ (string-match "/[-_.A-Za-z]+$" cfpath) 1) (string-match "\.[-_A-Za-z]+$" cfpath))))
      (add-to-list 'common-files `(,(format "[%s] %s" (upcase name) cfpath) . ,cfpath))))

  (let ((common-files-to-add '("~/.emacs.d/org/roam/inbox.org"
                               "~/.emacs.d/org/roam/reflections.org"
                               "~/.emacs.d/org/roam/bibliography.org"
                               "~/.emacs.d/org/agenda/inbox.org"
                               "~/.emacs.d/org/roam/mistakes.org"
                               "~/.emacs.d/init.el"
                               "~/.emacs.d/org/roam/bookmarks.org"
                               "~/.emacs.d/org/roam/problems.org"
                               "~/.emacs.d/org/roam/work.org"
                               "~/.emacs.d/org/roam/food.org"
                               "~/.emacs.d/org/roam/code.org"
                               "~/.emacs.d/org/roam/drill.org"
                               "~/.emacs.d/org/agenda/habits.org"
                               "~/.emacs.d/org/agenda/school.org")))
    (mapcar 'add-common-file common-files-to-add))
#+end_src

Restart emacs commands.
#+begin_src emacs-lisp
    (defun restart-emacs-debug-mode ()
      (interactive)
      (restart-emacs '("--debug-init")))

    (defun restart-emacs-no-init ()
      (interactive)
      (restart-emacs '("--no-init-file")))
#+end_src

Functions
#+begin_src emacs-lisp
    (defun gen-time-heading-id ()
      (format ":PROPERTIES:\n:ID: %s\n:END:" (format-time-string "%Y%m%d%k%M")))

    (defun icallwp (func prefix)
      "Interactive call func with some prefix."
      (let ((current-prefix-arg prefix))
        (call-interactively 'func)))

    (defun my-org-schedule ()
      (format "SCHEDULED: <%s>" (org-read-date)))

    (defun add-list-to-var (dest-var some-list)
      (mapcar '(lambda (x) (add-to-list dest-var x)) some-list))
#+end_src

Custom commands.
#+begin_src emacs-lisp
  (defun open-emacs-config-file ()
    (interactive)
    (find-file (expand-file-name "~/.emacs.d/init.org")))

  (defun create-scratch-buffer ()
    ;; from https://www.emacswiki.org/emacs/RecreateScratchBuffer
    (interactive)
    (switch-to-buffer-other-window (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))

  (defun load-config-file ()
    (interactive)
    (load-file (expand-file-name "~/.emacs.d/init.el")))

  (defun open-common-file ()
    (interactive)
    (ivy-read "Goto: " common-files :require-match t :action (lambda (file) (find-file (cdr file)))))


  (defun copy-buffer-file-name ()
    (interactive)
    (kill-new buffer-file-name))


  (defun delete-buffer-file ()
    (interactive)
    (let ((current-file (buffer-file-name)))
      (if current-file
          (progn
            (save-buffer current-file)
            (delete-file current-file)
            (kill-buffer (current-buffer))))))


  (defun ins-checkbox-item ()
    (interactive)
    (insert "- [ ]  "))


  (message "Functions loaded in...")
#+end_src

Moving screenshots.
#+begin_src emacs-lisp
  (defun screenshot-p (file)
    (when (and (>= (length file) 16) (string= "Screenshot from " (substring file 0 16)))
      (progn file)))


  (defun get-screenshot-files ()
    (let ((screenshot-files '()))
      (progn
	(dolist (file (directory-files "~/Pictures"))
	  (when (screenshot-p file)
	    (setq screenshot-files (cons file screenshot-files))))
	screenshot-files)))


  (defun insert-screenshot (filename)
    (progn 
      (org-insert-link nil filename "")
      (org-redisplay-inline-images)))


  (defun move-and-insert-screenshot ()
    (interactive)
    (ivy-read "Copy Image to ~/.emacs.d/org/images/" (get-screenshot-files)
	      :action (lambda (selection)
			(let ((new-file-name (concat "~/.emacs.d/org/images/" (read-string "New Image Name: ") ".png"))
			      (file-to-copy (concat "~/Pictures/" selection)))
			  (progn
			    (copy-file file-to-copy new-file-name)
			    (insert-screenshot (concat "file:" new-file-name)))))))
#+end_src
* Keybinds
** General, Key-Chord, and Which-key
General is a comprehensive keybinding management package (analoguous to use-package and package management). All of my keybindings are configured using this package with `general-define-key` or a custom leader key defintion.
#+begin_src emacs-lisp

  (use-package general)

#+end_src

Key-Chord supports keybinding to quickly pressed key pairs. I only use this for "fd/df" evil escape sequence.
#+begin_src emacs-lisp

  (use-package key-chord
    :diminish
    :config
    (key-chord-mode 1))

#+end_src

Which-key adds a help window that shows available keybinds for given prefixes.
#+begin_src emacs-lisp

  (use-package which-key
    :diminish
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-side-window-max-height 0.30)
    (which-key-idle-delay 0.3)
    (which-key-idle-secondary-delay 0.05)
    :config
    (which-key-mode))

#+end_src
** Base
Sets the escape key to behave similar to C-g in native emacs. This is for ergonomic reasons.
#+begin_src emacs-lisp

  (general-define-key "<escape>" 'keyboard-escape-quit)
  (general-define-key
   :states 'normal
   "q" nil)
  (general-define-key
   :states 'normal
   "m" 'evil-record-macro)

#+end_src
** SPC
All keybindings with a SPC prefix, this is inspired by Spacemacs system.
*** Leader Key
The leader key defines the primary prefix of my personal keybinds. Vim introduced leader keys were introduced to me.
#+begin_src emacs-lisp
    (general-create-definer my-leader-def
      :keymaps '(normal visual emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      :global-prefix "C-SPC")
#+end_src
*** Org
General Org-mode keybinds.
#+begin_src emacs-lisp
  (my-leader-def
    "o" '(:ignore t :which-key "Org-mode")
    "o l" '(org-add-note :which-key "Logbook entry")
    "o n" '(:ignore t :which-key "Narrow")
    "o n s" '(org-narrow-to-subtree :which-key "Subtree")
    "o n w" '(widen :which-key "Widen")
    "o r" '(org-redisplay-inline-images :which-key "Redisplay Inline Images")
    "o t" '(org-todo :which-key "Toggle Todo")
    "o s" '(org-store-link :which-key "Store Org Link")
    "o q" '(org-set-tags-command :which-key "Set Tags")
    "o x" '(org-export-dispatch :which-key "Export"))
#+end_src

Useful Org-mode clocking commands.
#+begin_src emacs-lisp
  (my-leader-def
    "o k" '(:ignore t :which-key "Clock")
    "o k i" '(org-clock-in :which-key "In")
    "o k o" '(org-clock-out :which-key "Out")
    "o k l" '(org-clock-in-last :which-key "Last")
    "o k d" '(org-clock-display :which-key "Display")
    "o k q" '(org-clock-cancel :which-key "Cancel")
    "o k g" '((lambda () (interactive) (icallwp 'org-clock-goto 4)) :which-key "Goto")
    "o k c" '(org-clock-goto :which-key "Current"))
#+end_src

Useful Org-mode archiving commands.
#+begin_src emacs-lisp
  (my-leader-def 
      "o a" '(:ignore t :which-key "Archive")
      "o a e" '(org-archive-subtree-default :which-key "Entry")
      "o a s" '(org-archive-subtree :which-key "Subtree")
      "o a S" '((lambda () (interactive) (icallwp 'org-archive-subtree 4)) :which-key "Select")
      "o a i" '(org-toggle-archive-tag :which-key "Internal"))
#+end_src
**** Org-Roam
#+begin_src emacs-lisp
  (my-leader-def
   "r l" 'org-roam-buffer-toggle
   "r i" 'org-roam-node-insert
   "r f" 'org-roam-node-find
   "r" '(:ignore t :which-key "Org-roam")

   "r d j" '(org-roam-dailies-capture-today :which-key "Capture today")
   "r d p" '(org-roam-dailies-goto-today :which-key "Goto today")
   "r d b" '(org-roam-dailies-goto-next-note :which-key "Next note")
   "r d f" '(org-roam-dailies-goto-previous-note :which-key "Previous note")
   "r d" '(:ignore t :which-key "Dailies"))
#+end_src
*** Emacs
Generic commands for manipulating the Emacs editor system.
#+begin_src emacs-lisp
  (my-leader-def
    "e" '(:ignore t :which-key "Emacs")
    "e c" '(open-emacs-config-file :which-key "Open config file")
    "e r" '(restart-emacs :which-key "Regular restart")
    "e d" '(restart-emacs-debug-mode :which-key "Debug mode restart")
    "e n" '(restart-emacs-no-init :which-key "No init restart")
    "e s" '(create-scratch-buffer :which-key "Open scratch buffer")
    "e l" '(load-config-file :which-key "Load config file")
    "e m" '(view-echo-area-messages :which-key "Echo messages")
    "e q" '(save-buffers-kill-terminal :which-key "Quit")
    "e e" '(eval-buffer :which-key "Eval Buffer"))
#+end_src
*** Ivy and Counsel
#+begin_src emacs-lisp
  (my-leader-def
  "TAB" '(ivy-switch-buffer :which-key "Switch buffer")
  "SPC" '(counsel-M-x :which-key "M-x"))
#+end_src
*** Files
#+begin_src emacs-lisp

  (my-leader-def
  "f" '(:ignore t :which-key "Files")
  "f f" '(find-file :which-key "Find File")
  "f c" '(open-common-file :which-key "Common Files")
  "f d" '(dired :which-key "Dired")
  "f r" '(recentf-open-files :which-key "Recent")
  "f s" '(save-buffer :which-key "Save Buffer"))

#+end_src
*** Help
Helpful commands as well as find-library that I use for understanding packages/commands.
#+begin_src emacs-lisp
  (my-leader-def
    "h" '(:ignore t :which-key "Help")
    "h f" '(helpful-callable :which-key "Function")
    "h v" '(helpful-variable :which-key "Variable")
    "h k" '(helpful-key :which-key "Key")
    "h d" '(helpful-at-point :which-key "At point")
    "h l" '(find-library :which-key "Library")
    "h i" '(info :which-key "Info")
    "h a" '(apropos :which-key "Apropos"))
#+end_src
*** Insert
#+begin_src emacs-lisp
  (my-leader-def
    "i" '(:ignore t :which-key "Insert")
    "i t" '(org-table-create-or-convert-from-region :which-key "Org table")
    "i d" '(org-deadline :which-key "Deadline")
    "i s" '(org-schedule :which-key "Schedule")
    "i c" '(ins-checkbox-item :which-key "Checkbox")
    "i f" '((lambda () (interactive) (icallwp 'org-insert-link 4)) :which-key "File Link")
    "i l" '(org-insert-link :which-key "Org-link"))
#+end_src
*** Apps
**** Leader Key
#+begin_src emacs-lisp
  (general-create-definer apps-leader-def
      :keymaps '(normal visual emacs)
      :prefix "SPC a"
      :global-prefix "C-SPC a")
#+end_src

#+begin_src emacs-lisp
  (my-leader-def
    "a" '(:ignore t :which-key "Apps"))
#+end_src
**** Deft
#+begin_src emacs-lisp
  (apps-leader-def
  "d" '(org-drill :which-key "Drill"))
#+end_src
**** Swiper
#+begin_src emacs-lisp
  (apps-leader-def 
    "s" '(swiper :which-key "Swiper"))
#+end_src
**** Org-Agenda
#+begin_src emacs-lisp
  (apps-leader-def
   "a" '(org-agenda :which-key "Org Agenda"))
#+end_src
**** Org-Capture
#+begin_src emacs-lisp
  (apps-leader-def
   "c" '(org-capture :which-key "Capture"))
#+end_src
**** Bookmarks
#+begin_src emacs-lisp
  (apps-leader-def
    "b" '(counsel-bookmark :which-key "Bookmarks"))
#+end_src
**** Elfeed
#+begin_src emacs-lisp
  (apps-leader-def
    "e" '(elfeed :which-key "Elfeed"))
#+end_src
*** Project
#+begin_src emacs-lisp

  (my-leader-def
    "p" '(:ignore t :which-key "Project")
    "p f" '(project-find-file :which-key "Find File")
    "p e" '(project-eshell :which-key "Eshell")
    "p q" '(project-query-replace-regexp :which-key "Replace w/ Regex")
    "p c" '(project-compile :which-key "Compile")
    "p k" '(project-kill-buffers :which-key "Kill Buffers")
    "p s" '(project-shell-command :which-key "Shell Command")
    "p p" '(project-switch-project :which-key "Switch Project")
    "p b" '(project-switch-to-buffer :which-key "Switch Buffer")
    "p r" '(project-find-regexp :which-key "Regex Search"))

#+end_src

*** Magit
#+begin_src emacs-lisp
  (my-leader-def
    "m" '(:ignore t :which-key "Magit")
    "m m" '(magit-status :which-key "Status")
    "m d" '(magit-dispatch :which-key "Dispatch")
    "m f" '(magit-file-dispatch :which-key "File Dispatch"))
#+end_src
*** Windows
#+begin_src emacs-lisp
    (my-leader-def
      "w" '(:ignore t :which-key "Window")
      "w c" '(:ignore t :which-key "Close")
      "w c o" '(delete-other-windows :which-key "Close other windows")
      "w c w" '(delete-window :which-key "Close window")
      "w s" '(:ignore t :which-key "Split")
      "w s h" '(split-window-horizontally :which-key "Split Horizontally")
      "w s v" '(split-window-vertically :which-key "Split Vertically")
      "w o" '(other-window :which-key "Other Window"))
#+end_src
*** Commands
#+begin_src emacs-lisp
  (my-leader-def
    "c" '(:ignore t :which-key "Commands")
    "c r" '(replace-regexp :which-key "Replace")
    "c e" '(eshell :which-key "Eshell")
    "c t" '(term :which-key "Term"))
#+end_src
*** Scripts
#+begin_src emacs-lisp
  (my-leader-def
    "s" '(:ignore t :which-key "Scripts")
    "s m" '(move-and-insert-screenshot :which-key "Move+Insert Screenshoot")
    "s i" '(insert-screenshot :which-key "Insert Screenshot"))
#+end_src

*** Yasnippet
#+begin_src emacs-lisp

  (my-leader-def
    "y" '(:ignore t :which-key "Yasnippet")
    "y i" '(yas-insert-snippet :which-key "Insert")
    "y n" '(yas-new-snippet :which-key "New")
    "y t" '(yas-describe-tables :which-key "Describe Tables")
    "y r" '(yas-reload-all :which-key "Reload all"))

#+end_src
** Modes
*** Org-Agenda
#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'org-agenda-mode-map
   "j" 'org-agenda-next-line
   "k" 'org-agenda-previous-line)
#+end_src
*** Evil
#+begin_src emacs-lisp
  (general-define-key
   :states '(insert replace)
   (general-chord "fd") 'evil-normal-state
   (general-chord "df") 'evil-normal-state)

  (general-define-key
   :states 'normal
   "j" 'evil-next-visual-line
   "k" 'evil-previous-visual-line)
#+end_src

*** Info
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'Info-mode-map
   "j" 'Info-scroll-up ;; <BACKSPACE>
   "k" 'Info-scroll-down ;; <SPC>
   "h" 'Info-backward-node ;; [
   "l" 'Info-forward-node ;; ]
   "e" 'Info-history-back ;; l
   "r" 'Info-history-forward ;;  r
   "m" 'Info-menu ;; m
   "n" 'Info-goto-node ;; g
   "t" 'Info-top-node ;; t
   "f" 'Info-follow-reference ;; f
   )
#+end_src
*** Elfeed
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'elfeed-search-mode-map
   "r" 'elfeed-search-untag-all-unread
   "u" 'elfeed-search-tag-all-unread)
#+end_src
*** Ivy
#+begin_src emacs-lisp

  (general-define-key
   :keymaps 'ivy-switch-buffer-map
   "M-l" 'ivy-done
   "M-d" 'ivy-switch-buffer-kill)

  (general-define-key
   :keymaps 'ivy-minibuffer-map
   "M-j" 'ivy-next-line
   "M-k" 'ivy-previous-line)

#+end_src
* Org
** Config
Startup Properties.
#+begin_src emacs-lisp 

  (require 'org)
  (add-to-list 'org-modules 'org-habit)
  (org-indent-mode 1)
  (diminish 'org-indent-mode)
  (setq org-startup-folded t)
  (setq org-startup-with-inline-images t)
  (setq org-startup-with-latex-preview t)
  (setq org-hide-block-startup nil)

#+end_src

Agenda Variables
These are general agenda variables I like for my custom agenda views. I do not use the default views very often so I do not mind how my configuration affects them.
#+begin_src emacs-lisp

  (setq org-agenda-files `(,(expand-file-name "~/.emacs.d/org/agenda")))
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-show-future-repeats t)
  (setq org-agenda-entry-text-maxlines 3)
  (setq org-agenda-start-day "+0d")
  (setq org-habit-show-habits-only-for-today t)
  (setq org-habit-show-habits nil)

#+end_src

*Custom Agenda Views*
#+begin_src emacs-lisp

  (setq org-agenda-custom-commands '(("d" "Dashboard"
				      ((agenda "" ((org-agenda-span 5)
						   (org-agenda-start-with-entry-text-mode t)
						   (org-habit-show-all-today t)
						   (org-habit-show-habits t)))))
				     ("r" "Report"
				      ((agenda "" ((org-agenda-start-day "-21d")
						   (org-agenda-span 21)
						   (org-agenda-start-with-log-mode t)
						   (org-agenda-start-with-clockreport-mode t)
						   (org-agenda-skip-archived-trees nil)))))
				     ("f" "Future"
				      ((agenda "" ((org-agenda-span 30)))))))

#+end_src


*Todo*
This sets custom TODO keywords along with their faces. I follow the regular TODO/DONE states used by regular orgmode with more descriptive subcategories. Parentheses designate the keyword's shortkey in the ~org-todo~.
#+begin_src emacs-lisp

  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "NEXT(n)" "|" "DONE(d)" "FAILED(f@)" "PARTIAL(p@)" "EXCUSE(e@)")))
  (setq org-todo-keyword-faces '(("TODO" . org-todo) ("DONE" . org-done) ("FAILED" . "red") ("PARTIAL" . "yellow") ("EXCUSE" . "gray") ("WAITING" . "blue") ("NEXT" . "yellow")))
    (setq org-use-fast-todo-selection t)

#+end_src

*Faces*
Colors and background colors of text org emphasis tags are set here. All the emphasis tags can be found in ~org-emphasis-alist~. My solution was made using answers to [[https://stackoverflow.com/questions/44811679/orgmode-change-code-block-background-color][this StackOverflow question]].
#+begin_src emacs-lisp

  (require 'color)
  (set-face-attribute 'org-block nil :background
		      (color-darken-name
		       (face-attribute 'default :background) 3))
  (set-face-attribute 'org-block-begin-line nil :foreground
		      (color-lighten-name
		       (face-attribute 'default :background) 20))
  (set-face-attribute 'org-code nil :background
		      (color-darken-name
		       (face-attribute 'default :background) 3))

#+end_src

*Export*
#+begin_src emacs-lisp

  (require 'ox-latex)
  (add-to-list 'org-latex-classes '("custom" "\\documentclass[12pt]{article}
		    \\usepackage{parskip}
		  \\usepackage{amsmath}
	      \\usepackage{hyperref}
	    \\hypersetup{
	colorlinks=true,
	linkcolor=blue,,
	}
      \\usepackage{listings}
  \\renewcommand{\\rmdefault}{\\sfdefault}
    "
				    ("\\section{%s}" . "\\section*{%s}")
				    ("\\subsection{%s}" . "\\subsection*{%s}")
				    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
				    ("\\paragraph{%s}" . "\\paragraph*{%s}")
				    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-listings t)

#+end_src

Rest of the config.
#+begin_src emacs-lisp

  (setq org-return-follows-link t)
  (setq org-default-notes-file (expand-file-name "~/.emacs.d/org/notes.org"))
  (setq org-hide-emphasis-markers t)
  (setq org-hidden-keywords '(title))
  (setq org-adapt-indentation t)
  (setq org-deadline-warning-days 0)
  (setq org-tags-column -60)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (setq org-image-actual-width '(400))
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-babel-evaluate nil)
  (setq org-babel-default-header-args:sage '((:session . t)
                                             (:results . "output")))
  (setq sage-shell:check-ipython-version-on-startup nil)
  (setq sage-shell:set-ipython-version-on-startup nil)

#+end_src

*** Latex Preview
#+begin_src emacs-lisp
  (setq org-format-latex-options '(:foreground default
                                               :background default
                                               :scale 1.30
                                               :html-foreground "Black"
                                               :html-background "Transparent"
                                               :html-scale 1.0
                                               :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-latex-packages-alist '(("usenames" "color")
                                   ("" "amsmath")
                                   ("mathscr" "eucal")
                                   ("utf8" "inputenc")
                                   ("T1" "fontenc")
                                   ("" "graphicx")
                                   ("normalem" "ulem")
                                   ("" "textcomp")
                                   ("" "marvosym")
                                   ("" "latexsym")
                                   ("" "amssymb")))
#+end_src
*** Org-capture templates
Base
#+begin_src emacs-lisp 
  (defvar my-oc-templates '())
  (add-list-to-var 'my-oc-templates '(("i" "Inbox" entry (file "~/.emacs.d/org/roam/inbox.org")
				       "* [%<%Y-%m-%d %k:%M>] %?\n%(gen-time-heading-id)\n** Questions\n")
				      ("m" "Mistake Entry" entry (file "~/.emacs.d/org/roam/mistakes.org") "* %? \n%(gen-time-heading-id)")
				      ("p" "CP Problem" entry (file "~/.emacs.d/org/roam/problems.org") "* [[%x][%<%Y-%m-%d>]]" :immediate-finish t)
				      ("w" "Work Session" entry (file "~/.emacs.d/org/roam/work.org") "* Work Session #%^{SESSION NUMBER}\n%(my-org-schedule)\n** TODOs\n*** TODO  %?\n** Reflection")
				      ("f" "Food" entry (file+headline "~/.emacs.d/org/roam/food.org" "Food Journal") "** [%<%d/%m/%Y>]\n + Breakfast :: %?\n + Lunch :: \n + Dinner :: \n + Misc :: ")))
#+end_src

Agenda 
#+begin_src emacs-lisp
  (add-list-to-var 'my-oc-templates '(("a" "Agenda Items")
                                      ("at" "Todo" checkitem (file+headline "~/.emacs.d/org/agenda/inbox.org" "Box") "+ [ ] %^{TODO}." :immediate-finish t)
                                      ("al" "To Learn" item (file+headline "~/.emacs.d/org/agenda/inbox.org" "Hmmm... Interesting") "+ %^{CONCEPT} :: %^{DESCRIPTION}." :immediate-finish t)))
#+end_src

Reflection
#+begin_src emacs-lisp
  (add-list-to-var 'my-oc-templates '(("r" "Reflection templates")
                                     ("rg" "Reflection" entry (file+headline  "~/.emacs.d/org/roam/reflections.org" "Reflections") "**  %^{TITLE} \n%T\n %?")
                                     ("rt" "Question" checkitem (file+headline "~/.emacs.d/org/roam/reflections.org" "Questions") " + [ ] %^{Question}" :immediate-finish t)))
#+end_src

Chinese
#+begin_src emacs-lisp 
  (add-list-to-var 'my-oc-templates '(("c" "Chinese")
                                     ("cs" "Sentence" item (file+headline "~/.emacs.d/org/roam/20220831105406-mandarin.org" "Sentences") " + [%<%Y-%m-%d>] %^{SENTENCE} :: %^{MEANING}" :immediate-finish t)
                                     ("cv" "Vocabulary" item (file+headline "~/.emacs.d/org/roam/20220831105406-mandarin.org" "Vocab") " + [%<%Y-%m-%d>] %^{CHARACTER} (%^{PINYIN}) :: %^{MEANING}" :immediate-finish t)
                                     ("ca" "Archive" item (file+headline "~/.emacs.d/org/roam/20220831105406-mandarin.org" "Vocab") " + [%<%Y-%m-%d>]  %?")))
#+end_src

Bibiliography
#+begin_src emacs-lisp 
  (add-list-to-var 'my-oc-templates '(("b" "Bibliography/Bookmarks")
                                     ("bm" "Bookmarks" entry (file+headline "~/.emacs.d/org/roam/bookmarks.org" "Website Bookmarks") "** %<%Y-%m-%d> [[%x][%?]] \n%(gen-time-heading-id)")))
#+end_src

#+begin_src emacs-lisp
  (setq org-capture-templates my-oc-templates)
#+end_src
** Babel
Taken from System Crafters "Emacs from Scratch #7." It automatically tangles ~init.org~ whenever it is saved.
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src
** Roam
Roam itself.
#+begin_src emacs-lisp
  (use-package org-roam
    :init
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-direction)
                   (direction . right)
                   (window-width . 0.33)
                   (window-height . fit-window-to-buffer)))
    :custom
    (org-roam-directory (expand-file-name "~/.emacs.d/org/roam"))
    (org-roam-completion-everywhere t)
    (org-roam-v2-ack t)
    (org-roam-capture-templates '(("n" "Note" plain "%?"
                                   :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+filetags: :note:\n#+TITLE: ${title}\n\n* Questions")
                                   :unnarrowed t)
                                  ;; ("c" "Concept" plain "* Questions\n* Summary\n  %?\n* Relevance\n"
                                  ;;  :target (file+head "%<%Y%m%d%H%M%S>-concept_${slug}.org" "#+filetags: :concept:\n#+TITLE: ${title}")
                                  ;;  :unnarrowed t)
                                  ;; ("h" "Hoard" plain "* Concepts\n* Hoard\n %?"
                                  ;;  :target (file+head "%<%Y%m%d%H%M%S>-hoard_${slug}.org" "#+filetags: :hoard:\n#+TITLE: ${title}")
                                  ;;  :unnarrowed t)
                                  ("t" "Thought" plain "*  %?"
                                   :target (file+head "%<%Y%m%d%H%M%S>-thought_${slug}.org" "#+filetags: :thought\n#+TITLE: ${title}")
                                   :unnarrowed t)))
    (org-roam-node-display-template (concat (propertize "${tags:10}" 'face 'org-tag) " ${title:*}"))
    (org-roam-dailies-capture-templates '(("d" "default" entry "* %?"
                                           :target (file+head "%<%Y-%m-%d>.org" "#+TITLE: %<%Y-%m-%d>\n")
                                           :unnarrowed t)
                                          ("m" "moment" entry "* %<%I:%M %p> %?"
                                           :target (file+head "%<%Y-%m-%d>.org" "#+TITLE: %<%Y-%m-%d>\n")
                                           :unnarrowed t)))
    (org-roam-file-exclude-regexp "\\(inbox.org\\)\\|\\(work.org\\)\\|\\(daily/\\)\\|\\(mistakes.org\\)\\|\\(drill.org\\)")
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode))
#+end_src

UI
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
  #+end_src
** Appear
#+begin_src emacs-lisp
  (defun my-org-appear-trigger-function ()
    (interactive)
    ;; (message "my org-appear-trigger function triggered!")
    (org-appear-mode)
    (add-hook 'evil-insert-state-entry-hook #'org-appear-manual-start)
    (add-hook 'evil-insert-state-exit-hook #'org-appear-manual-stop))

  (use-package org-appear
    :requires (org)
    :custom
    (org-appear-trigger 'manual))
    ;; :hook
    ;; (org-mode . my-org-appear-trigger-function))
#+end_src
** Superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :custom
    (org-hide-leading-stars nil)
    (org-superstar-leading-bullet ?\s)
    (org-indent-mode-turns-on-hiding-stars nil)
    (org-superstar-remove-leading-stars t)
    (org-cycle-level-faces nil)
    (org-n-level-faces 4)
    :config
    (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
    ;; Low levels are unimportant => no scaling
    (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
    ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
    (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2) 
    (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.4) 
    (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.6) 
    (set-face-attribute 'org-document-title nil
                        :height 2.074
                        :foreground 'unspecified
                        :inherit 'org-level-8)
    :hook (org-mode . (lambda () (interactive)(org-superstar-mode 1))))
#+end_src

#+begin_src emacs-lisp
  (message "Org loaded in...")
#+end_src
** Drill
#+begin_src emacs-lisp

  (use-package org-drill
    :custom
    (org-drill-scope '("~/.emacs.d/org/roam/drill.org"))
    (org-drill-hide-item-headings-p t)
    (org-drill-maximum-items-per-session nil)
    (org-drill-maximum-duration 30)
    (org-drill-add-random-noise-to-intervals-p t)
    (org-drill-adjust-intervals-for-early-and-late-repetitions-p t))

#+end_src

** Ox-hugo
#+begin_src emacs-lisp

  (use-package ox-hugo
      :requires (ox))

#+end_src

* Evil
#+begin_src emacs-lisp

  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)

  (use-package evil
    :diminish
    :custom
    (evil-want-C-i-jump nil)
    (evil-respect-visual-line-mode t)
    :config
    (evil-mode 1))

#+end_src

** Evil Collection
#+begin_src emacs-lisp

    (use-package evil-collection
      :requires (evil)
      :diminish
      :custom
      (evil-collection-calendar-want-org-bindings t)
      :config
      (evil-collection-init)
      (evil-collection-calendar-setup)
      (diminish 'evil-collection-unimpaired-mode))

    (message "Evil loaded in...")

#+end_src
** Evil Easymotion
evil-easymotion is not on ELPA or MELPA.
* Ivy and Counsel
#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :custom
    (ivy-use-selectable-prompt t)
    :config
    (ivy-mode 1))

  (use-package counsel)

  (use-package ivy-rich
    :requires (counsel)
    :init
    (ivy-rich-mode 1))

#+end_src
* Extra Programming Packages
** Language Modes
Sage-shell-mode
#+begin_src emacs-lisp

  (use-package sage-shell-mode
    :diminish t)

#+end_src

Ob-sagemath. For compatiability with Org-babel code blocks.
#+begin_src emacs-lisp

  (use-package ob-sagemath
    :requires (sage-shell-mode))

#+end_src

Haskell-mode to support syntax highlighting, completion, etc. for Haskell.
#+begin_src emacs-lisp

  (use-package haskell-mode)

#+end_src

** Rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck)
  ;;  :init (global-flycheck-mode))
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :diminish t
    :hook (prog-mode . company-mode))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode 1))
#+end_src

** Magit
#+begin_src emacs-lisp

  (use-package magit)

#+end_src

* Misc
** Helpful
#+begin_src emacs-lisp

  (use-package helpful)

#+end_src

** Restart-emacs
#+begin_src emacs-lisp

  (use-package restart-emacs)

#+end_src

** Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :diminish)
#+end_src

*** Elfeed-org
#+begin_src emacs-lisp

  (use-package elfeed-org
    :custom (rmh-elfeed-org-files (list (expand-file-name "~/.emacs.d/elfeed.org")))
    :config
    (elfeed-org))

#+end_src

** Deft
#+begin_src emacs-lisp

  (use-package deft
    :custom
    (deft-directory (expand-file-name "~/.emacs.d/org/"))
    (deft-recursive t ))

#+end_src

** Visual-fill-column
#+begin_src emacs-lisp

  (use-package visual-fill-column
    :custom
    (fill-column 100)
    :config
    (setq-default visual-fill-column-center-text t))

#+end_src

** Eglot
An LSP client which easily brings over modern IDE capabilities to Emacs. Like other LSP clients, Eglot can be integrated with packages like company for additional functionality. The below code starts Eglot (along with the language server) for different major modes.
#+begin_src emacs-lisp :tangle no

  (require eglot)
  (add-hook 'c++-mode-hook eglot-ensure)
  (add-hook 'c-mode-hook eglot-ensure)

#+end_src

